const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const commandHandlers = require('./handlers/commandHandlers');
const messageHandlers = require('./handlers/messageHandlers');
const aiHandler = require('./handlers/aiHandler');
const caseHandlers = require('./handlers/caseHandlers');
const subscriptionHandlers = require('./handlers/subscriptionHandlers_new');
const adminHandlers = require('./handlers/adminHandlers');
const menuHandlers = require('./handlers/menuHandlers');
const assistantsService = require('./services/assistantsService');
const subscriptionService = require('./services/subscriptionService');
const whisperService = require('./services/whisperService');
const { generateResponse } = require('./services/openaiService');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
require('./server');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!config.telegramToken) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª .env');
  process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(config.telegramToken, config.botConfig);

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => commandHandlers.handleStart(bot, msg));
bot.onText(/\/help/, (msg) => commandHandlers.handleHelp(bot, msg));
bot.onText(/\/info/, (msg) => commandHandlers.handleInfo(bot, msg));
bot.onText(/\/reset/, (msg) => commandHandlers.handleReset(bot, msg));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot.onText(/\/ai (.+)/, (msg, match) => {
  const userId = msg.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  if (subscriptionService.canSendRequest(userId)) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    subscriptionService.registerRequest(userId);
    aiHandler.handleAiRequest(bot, msg, match);
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptionHandlers.sendSubscriptionRequiredMessage(bot, msg.chat.id);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/\/ai$/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai. –ù–∞–ø—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ë–∏—à–∫–µ–∫–µ'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /case –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ–π—Å–∞
bot.onText(/\/case/, (msg) => {
  const userId = msg.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  if (subscriptionService.canSendRequest(userId)) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    subscriptionService.registerRequest(userId);
    caseHandlers.handleCaseCommand(bot, msg);
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptionHandlers.sendSubscriptionRequiredMessage(bot, msg.chat.id);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
bot.onText(/\/end/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  if (assistantsService.hasActiveSession(userId)) {
    assistantsService.endSession(userId);
    bot.sendMessage(chatId, '–í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /case, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.');
  } else {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
bot.onText(/\/subscribe/, (msg) => subscriptionHandlers.handleSubscribe(bot, msg));
bot.onText(/\/status/, (msg) => subscriptionHandlers.handleStatus(bot, msg));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.onText(/\/admin/, (msg) => adminHandlers.handleAdminCommand(bot, msg));
bot.onText(/\/reset_counter (.+)/, (msg, match) => adminHandlers.handleResetCounterCommand(bot, msg, match));
bot.onText(/\/add_premium (.+)/, (msg, match) => adminHandlers.handleAddPremiumCommand(bot, msg, match));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
bot.on('text', async (msg) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
  if (!msg.text.startsWith('/')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    const menuButtons = [
      '‚ùì –ü–æ–º–æ—â—å',
      'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
    ];
    
    if (menuButtons.includes(msg.text)) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
      menuHandlers.handleMenuSelection(bot, msg);
      return;
    }
    
    const userId = msg.from.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    if (assistantsService.hasActiveSession(userId)) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      if (subscriptionService.canSendRequest(userId)) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        subscriptionService.registerRequest(userId);
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–µ–π—Å–æ–≤
        caseHandlers.handleCaseMessage(bot, msg);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptionHandlers.sendSubscriptionRequiredMessage(bot, msg.chat.id);
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (subscriptionService.canSendRequest(userId)) {
        try {
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
          subscriptionService.registerRequest(userId);
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å OpenAI API
          bot.sendChatAction(msg.chat.id, 'typing');
          
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API
          const response = await generateResponse(msg.text);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          bot.sendMessage(msg.chat.id, response);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          messageHandlers.handleTextMessage(bot, msg);
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptionHandlers.sendSubscriptionRequiredMessage(bot, msg.chat.id);
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
bot.on('photo', (msg) => messageHandlers.handlePhoto(bot, msg));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('voice', async (msg) => {
  const userId = msg.from.id.toString();
  const chatId = msg.chat.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    if (subscriptionService.canSendRequest(userId)) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      subscriptionService.registerRequest(userId);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const transcribedText = await whisperService.handleVoiceMessage(bot, msg);
      
      if (transcribedText) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, `–í–∞—à –∑–∞–ø—Ä–æ—Å: ${transcribedText}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        if (assistantsService.hasActiveSession(userId)) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
          const response = await assistantsService.sendMessage(userId, transcribedText);
          await bot.sendMessage(chatId, response);
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API
          const response = await generateResponse(transcribedText);
          await bot.sendMessage(chatId, response);
        }
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      subscriptionHandlers.sendSubscriptionRequiredMessage(bot, chatId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error(`–û—à–∏–±–∫–∞ polling: ${error.message}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ
  // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (!msg.text && !msg.photo && !msg.voice) {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', (callbackQuery) => {
  const data = callbackQuery.data;
  
  if (data.startsWith('category_')) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–µ–π—Å–∞
    caseHandlers.handleCategorySelection(bot, callbackQuery);
  } else if (data === 'end_session') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    caseHandlers.handleEndSession(bot, callbackQuery);
  } else if (data === 'continue_session') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    caseHandlers.handleContinueSession(bot, callbackQuery);
  } else if (data === 'payment_subscription') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
    subscriptionHandlers.handlePaymentCallback(bot, callbackQuery);
  } else if (data === 'simulate_payment') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
    subscriptionHandlers.handleSimulatePayment(bot, callbackQuery);
  } else if (data === 'admin_reset_counter') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    adminHandlers.handleResetCounter(bot, callbackQuery);
  } else if (data === 'admin_add_premium') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
    adminHandlers.handleAddPremium(bot, callbackQuery);
  } else if (data === 'premium_benefits') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
    const channelSubscriptionService = require('./services/channelSubscriptionService');
    channelSubscriptionService.sendPremiumBenefits(bot, callbackQuery);
  } else if (data === 'next') {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—å—à–µ"
    caseHandlers.handleCategorySelection(bot, callbackQuery);
  }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)
setInterval(() => {
  subscriptionService.checkSubscriptionExpiry();
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
}, 60 * 60 * 1000);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ (–∫–∞–∂–¥—ã–π —á–∞—Å)
setInterval(async () => {
  try {
    const groupSubscriptionService = require('./services/channelSubscriptionService');
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ...');
    
    const results = await groupSubscriptionService.checkAllUsersGroupMembership(bot);
    console.log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.checked}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
    for (const userId of results.leftGroup) {
      await groupSubscriptionService.notifyPremiumDeactivation(bot, userId);
    }
    
    if (results.leftGroup.length > 0) {
      console.log(`–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–æ–∫: ${results.leftGroup.length}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ:', error);
  }
}, 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
  bot.stopPolling();
  process.exit(0);
});
